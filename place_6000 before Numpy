import sys
import math
import random
import copy
import time

dest_x=dest_y =0
nb_killed_zombie = 0
nb_killed_human = 0
score = 0


#--------------------------
#---DEFINITION DES CLASSES
#--------------------------

class Human :
    def __init__ (self,human_id, human_x,human_y,dist_menace="",rescue_value="",life=True):
        self.human_id = human_id
        self.x=human_x
        self.y=human_y
        self.dist_menace=dist_menace
        self.rescue_value=rescue_value
        self.life = life


class Zombie :
    def __init__ (self,zombie_id, zombie_x,zombie_y,zombie_xnext,zombie_ynext,life=True):
        self.zombie_id = zombie_id
        self.x=zombie_x
        self.y=zombie_y
        self.zombie_xnext=zombie_xnext
        self.zombie_ynext=zombie_ynext
        self.life=life


    def Move (self,l_human,ash):

        dir_x = self.Get_direction (l_human,ash)[0]
        dir_y = self.Get_direction (l_human,ash)[1]
        dist_to_target = distance (self.x,self.y,dir_x,dir_y)
        if dist_to_target <= 400 :
            self.x = dir_x
            self.y = dir_y
        else : 
            self.x = self.x + 400/dist_to_target * (dir_x-self.x)
            self.y = self.y + 400/dist_to_target * (dir_y-self.y)


    def Get_direction (self,l_human,ash):
        dist_min = 18500
        humain_plus_proche_zombie_index  = 0
        for i in range(len(l_human)):
            if distance (self.x,self.y,l_human[i].x,l_human[i].y) < dist_min and l_human[i].life:
                dist_min = distance (self.x,self.y,l_human[i].x,l_human[i].y)
                humain_plus_proche_zombie_index = i
        if dist_min < distance (self.x,self.y,ash.x,ash.y) :
            dir_x = l_human[humain_plus_proche_zombie_index ].x
            dir_y = l_human[humain_plus_proche_zombie_index ].y
        else :
            dir_x = ash.x
            dir_y = ash.y
        return dir_x,dir_y,humain_plus_proche_zombie_index

    def Kill (self,l_human): #dealing collisions beetween Humans and Zombies
        nb_human_killed = 0
        for j in range (len(l_human)):
            #print("l_human[j].x,l_human[j].y)",(l_human[j].x,l_human[j].y),"(self.x,self.y)",(self.x,self.y),"self.life",self.life,"l_human[j].life",l_human[j].life, file=sys.stderr, flush=True)
            if (l_human[j].x,l_human[j].y) == (self.x,self.y) and self.life and l_human[j].life :
                l_human[j].life = False
                nb_human_killed += 1
                #print("ckpt 1", file=sys.stderr, flush=True)
        return nb_human_killed


class Ash:
    def __init__(self, x,y,life=True):
        self.x=x
        self.y=y
        self.life = life

    def Move (self,dir_x,dir_y) :
        dist_to_target = distance (self.x,self.y,dir_x,dir_y)
        if dist_to_target <= 1000 :
            self.x = dir_x
            self.y = dir_y          
        else : 
            self.x = self.x + 1000/dist_to_target * (dir_x-self.x)
            self.y = self.y + 1000/dist_to_target * (dir_y-self.y)

    def Kill (self,l_zombie) : # dealing collisions beetween Ash and Zombies
        nb_zombie_killed = 0
        for i in range(len(l_zombie)):
            if distance (self.x,self.y,l_zombie[i].x,l_zombie[i].y) < 2000 and l_zombie[i].life :
                l_zombie[i].life = False
                nb_zombie_killed += 1

        return nb_zombie_killed

#--------------------------
#---DEFINITION DES METHODES
#--------------------------

#Méthodes calcul DIstance
def distance (x1,y1,x2,y2):
    distance = math.sqrt((x2-x1)**2+(y2-y1)**2)
    return distance

#Méthode Fibonacci : (n+2)ème terme de la suite de Fibonnacci
def Fibonacci (n): #n nombre de zombie tué pendant un même tour
    l_fibonacci = [0,1]  
    for i in range (2,n+3):
        f = l_fibonacci[i-1]+l_fibonacci[i-2]
        l_fibonacci.append(f) 
    return l_fibonacci[n+2]

#-------------------------
#-------------------------
#-------------------------

#-------------------------
#------- game loop--------
#-------------------------

count_turn = 0

while True:
    time_1 = time.time()
    count_turn += 1
    x, y = [int(i) for i in input().split()]
    ash = Ash (x,y)
    l_zombie=[]
    l_human=[]

    if count_turn > 1 :
        zombie_count_early_turn = zombie_count
        human_count_early_turn = human_count

    human_count = int(input())
    for i in range(human_count):
        human_id, human_x, human_y = [int(j) for j in input().split()]
        human = Human (human_id, human_x, human_y)
        l_human.append(human)

    if count_turn > 1 :
        zombie_count_early_turn = zombie_count

    zombie_count = int(input())
    for i in range(zombie_count):
        zombie_id, zombie_x, zombie_y, zombie_xnext, zombie_ynext = [int(j) for j in input().split()]
        zombie = Zombie (zombie_id, zombie_x, zombie_y, zombie_xnext, zombie_ynext)
        l_zombie.append(zombie)

    # SCORE du jeu
    if count_turn > 1 :
        nb_zombie_killed_early_turn = zombie_count_early_turn - zombie_count
        for i in range (nb_zombie_killed_early_turn):
            score += human_count_early_turn**2 * 10 * Fibonacci(i)


    # ------------------------
    #-----------GAME ---------
    #-------------------------
    

    dest_possibilities = ((1000, 1000),(1000, 3000),(1000, 5000),(1000, 7000),(3000, 1000),(3000, 3000),(3000, 5000),(3000, 7000),(5000, 1000),(5000, 3000),(5000, 5000),(5000, 7000),(7000, 1000),(7000, 3000),(7000, 5000),(7000, 7000),(9000, 1000),(9000, 3000),(9000, 5000),(9000, 7000),(11000, 1000),(11000, 3000),(11000, 5000),(11000, 7000),(13000, 1000),(13000, 3000),(13000, 5000),(13000, 7000))
    

    #----------------------------------------
    #------------ SIMU ----------------------
    #----------------------------------------


    #ordre de jeu 
    # 1 - Les zombies se déplacent vers leurs cibles.
    # 2 - Ash se déplace vers sa cible.
    # 3 - Tout zombie se situant dans un rayon de moins de 2000 unités est détruit.
    # 4 - Si un zombie se trouve sur un humain alors il le mange.

    # Tests de simulation
    nb_of_simulations_target = 30
    l_simulations = []

    nb_of_simulations = 0

    while nb_of_simulations != nb_of_simulations_target :
        
        ash_simu = copy.deepcopy(ash)
        l_zombie_simu = copy.deepcopy(l_zombie)
        l_human_simu = copy.deepcopy(l_human)
        nb_killed_zombie_simu = nb_killed_zombie

        nb_killed_human_simu = nb_killed_human
        
        human_count_simu = human_count
        nb_zombie_simu = zombie_count
        #print("------------------------------", file=sys.stderr, flush=True)
        score_simu = score
        l_1_simulation = []
        nb_turns_sim = 50
        turn_count_simu =0
        simu = True

        dest = random.choice(dest_possibilities)
        dest_x = int(dest[0])
        dest_y = int(dest[1])

        while turn_count_simu != nb_turns_sim and simu :
            
            nb_killed_human_simu = 0

            # 1 - Les zombies se déplacent vers leurs cibles.
            for j in range (len(l_zombie_simu)):
                l_zombie_simu[j].Move(l_human_simu,ash_simu)

            # 2 - Ash se déplace vers sa cible 
            ash_simu.Move (dest_x,dest_y)
            l_1_simulation.append((dest_x,dest_y))

            # 3 - Tout zombie se situant dans un rayon de moins de 2000 unités est détruit 
            nb_killed_zombie_this_turn = ash_simu.Kill (l_zombie_simu) # -- 3.1 décompte du nombre de Zombie tués
            nb_killed_zombie_simu += nb_killed_zombie_this_turn
            nb_zombie_simu -= nb_killed_zombie_this_turn

            # -- 3.2 Calcul du score
            for i in range (nb_killed_zombie_this_turn):
                score_simu += human_count_simu**2 * 10 * Fibonacci(i)
            
            # 4 - Si un zombie se trouve sur un humain alors il le mange.
            for i in range(len(l_zombie_simu)):
                nb_killed_human_simu += l_zombie_simu[i].Kill(l_human_simu)


            # -- 4.1 décompte du nombre d'humain restant
            human_count_simu -= nb_killed_human_simu
            if human_count_simu ==0 or nb_zombie_simu  == 0 :
                if human_count_simu ==0 :
                    score_simu += -100000
                l_1_simulation.append(score_simu)
                simu = False

            turn_count_simu += 1
        
        l_simulations.append(l_1_simulation)

        nb_of_simulations += 1

    # choix dest_x et dest_y
    best_score = - 500000
    index=0
    for i, value in enumerate (l_simulations):
        if value[-1] > best_score :
            best_score = value[-1]
            index = i
    dest_x = l_simulations[index][0][0]
    dest_y = l_simulations[index][0][1]
    time_2 = time.time()
    print("best_score ",best_score , "time",time_2-time_1,file=sys.stderr, flush=True)

    #----------------------------------------
    #-------- FINAL ANSWER-------------------
    #---- Your destination coordinates ------
    #----------------------------------------
    print(f"{dest_x} {dest_y}")





# To debug: print("Debug messages...", file=sys.stderr, flush=True)
